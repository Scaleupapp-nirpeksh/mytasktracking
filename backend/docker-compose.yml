# ====================================
# TASK TRACKER - DOCKER COMPOSE
# ====================================
# Development environment with all services
# Includes: Backend API, MongoDB, Redis, and MongoDB UI

version: '3.8'

services:
  # ====================================
  # Task Tracker Backend API
  # ====================================
  backend:
    build:
      context: .
      target: development
    container_name: tasktracker-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGODB_URI=mongodb://mongodb:27017/mytasktracking
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=development-jwt-secret-minimum-32-characters-long
      - JWT_REFRESH_SECRET=development-refresh-secret-minimum-32-characters
      - EMAIL_SERVICE=gmail
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - FRONTEND_URL=http://localhost:3000
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
    volumes:
      - .:/app
      - /app/node_modules
      - tasktracker-logs:/app/logs
      - tasktracker-uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - tasktracker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ====================================
  # MongoDB Database
  # ====================================
  mongodb:
    image: mongo:7.0
    container_name: tasktracker-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=mytasktracking
    volumes:
      - tasktracker-mongodb-data:/data/db
      - tasktracker-mongodb-config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - tasktracker-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ====================================
  # Redis Cache (Optional)
  # ====================================
  redis:
    image: redis:7.2-alpine
    container_name: tasktracker-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - tasktracker-redis-data:/data
    networks:
      - tasktracker-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ====================================
  # MongoDB Admin UI (Mongo Express)
  # ====================================
  mongo-express:
    image: mongo-express:1.0.0
    container_name: tasktracker-mongo-ui
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password123@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    depends_on:
      - mongodb
    networks:
      - tasktracker-network

  # ====================================
  # Redis Admin UI (RedisInsight)
  # ====================================
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: tasktracker-redis-ui
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - tasktracker-redisinsight:/db
    depends_on:
      - redis
    networks:
      - tasktracker-network

  # ====================================
  # Nginx Reverse Proxy (Optional)
  # ====================================
  nginx:
    image: nginx:alpine
    container_name: tasktracker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - tasktracker-logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - tasktracker-network
    profiles:
      - production

# ====================================
# Volumes for Data Persistence
# ====================================
volumes:
  tasktracker-mongodb-data:
    driver: local
  tasktracker-mongodb-config:
    driver: local
  tasktracker-redis-data:
    driver: local
  tasktracker-redisinsight:
    driver: local
  tasktracker-logs:
    driver: local
  tasktracker-uploads:
    driver: local

# ====================================
# Networks
# ====================================
networks:
  tasktracker-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ====================================
# Development Commands
# ====================================
# Start all services:
#   docker-compose up -d
#
# View logs:
#   docker-compose logs -f backend
#
# Access MongoDB UI:
#   http://localhost:8081
#   Username: admin, Password: admin123
#
# Access Redis UI:
#   http://localhost:8001
#
# Stop all services:
#   docker-compose down
#
# Reset all data:
#   docker-compose down -v